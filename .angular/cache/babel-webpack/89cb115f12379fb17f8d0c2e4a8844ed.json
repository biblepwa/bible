{"ast":null,"code":"import { read_file } from 'src/app/app.component.ts';\nimport * as wasm from './wasm_test_bg.wasm';\nconst heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) {\n  return heap[idx];\n}\n\nlet WASM_VECTOR_LEN = 0;\nlet cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\nlet cachedTextEncoder = new lTextEncoder('utf-8');\nconst encodeString = typeof cachedTextEncoder.encodeInto === 'function' ? function (arg, view) {\n  return cachedTextEncoder.encodeInto(arg, view);\n} : function (arg, view) {\n  const buf = cachedTextEncoder.encode(arg);\n  view.set(buf);\n  return {\n    read: arg.length,\n    written: buf.length\n  };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n  if (realloc === undefined) {\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = malloc(buf.length);\n    getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n  }\n\n  let len = arg.length;\n  let ptr = malloc(len);\n  const mem = getUint8Memory0();\n  let offset = 0;\n\n  for (; offset < len; offset++) {\n    const code = arg.charCodeAt(offset);\n    if (code > 0x7F) break;\n    mem[ptr + offset] = code;\n  }\n\n  if (offset !== len) {\n    if (offset !== 0) {\n      arg = arg.slice(offset);\n    }\n\n    ptr = realloc(ptr, len, len = offset + arg.length * 3);\n    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n    const ret = encodeString(arg, view);\n    offset += ret.written;\n  }\n\n  WASM_VECTOR_LEN = offset;\n  return ptr;\n}\n\nfunction isLikeNone(x) {\n  return x === undefined || x === null;\n}\n\nlet cachegetInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n  if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32Memory0;\n}\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n  if (idx < 36) return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\n\nfunction takeObject(idx) {\n  const ret = getObject(idx);\n  dropObject(idx);\n  return ret;\n}\n\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length) heap.push(heap.length + 1);\n  const idx = heap_next;\n  heap_next = heap[idx];\n  heap[idx] = obj;\n  return idx;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\nlet cachedTextDecoder = new lTextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n* @param {number} test\n* @param {number} book\n* @returns {string}\n*/\n\n\nexport function render(test, book) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n    wasm.render(retptr, test, book);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n\n    wasm.__wbindgen_free(r0, r1);\n  }\n}\n/**\n* @param {number} searches\n* @param {string} inp\n* @param {number} acc\n* @returns {string}\n*/\n\nexport function search(searches, inp, acc) {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n    var ptr0 = passStringToWasm0(inp, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.search(retptr, searches, ptr0, len0, acc);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n\n    wasm.__wbindgen_free(r0, r1);\n  }\n}\n/**\n* @returns {string}\n*/\n\nexport function render_widget() {\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n    wasm.render_widget(retptr);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n\n    wasm.__wbindgen_free(r0, r1);\n  }\n}\n\nfunction handleError(f, args) {\n  try {\n    return f.apply(this, args);\n  } catch (e) {\n    wasm.__wbindgen_exn_store(addHeapObject(e));\n  }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n  return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nexport function __wbg_readfile_e7bf3fd4e88d20a4() {\n  var ret = read_file();\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_string_get(arg0, arg1) {\n  const obj = getObject(arg1);\n  var ret = typeof obj === 'string' ? obj : undefined;\n  var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n}\n;\nexport function __wbindgen_object_drop_ref(arg0) {\n  takeObject(arg0);\n}\n;\nexport function __wbg_new_693216e109162396() {\n  var ret = new Error();\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_stack_0ddaca5d1abfb52f(arg0, arg1) {\n  var ret = getObject(arg1).stack;\n  var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n}\n;\nexport function __wbg_error_09919627ac0992f5(arg0, arg1) {\n  try {\n    console.error(getStringFromWasm0(arg0, arg1));\n  } finally {\n    wasm.__wbindgen_free(arg0, arg1);\n  }\n}\n;\nexport function __wbindgen_object_clone_ref(arg0) {\n  var ret = getObject(arg0);\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_process_f2b73829dbd321da(arg0) {\n  var ret = getObject(arg0).process;\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_is_object(arg0) {\n  const val = getObject(arg0);\n  var ret = typeof val === 'object' && val !== null;\n  return ret;\n}\n;\nexport function __wbg_versions_cd82f79c98672a9f(arg0) {\n  var ret = getObject(arg0).versions;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_node_ee3f6da4130bd35f(arg0) {\n  var ret = getObject(arg0).node;\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_is_string(arg0) {\n  var ret = typeof getObject(arg0) === 'string';\n  return ret;\n}\n;\nexport function __wbg_modulerequire_0a83c0c31d12d2c7() {\n  return handleError(function (arg0, arg1) {\n    var ret = module.require(getStringFromWasm0(arg0, arg1));\n\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbg_crypto_9e3521ed42436d35(arg0) {\n  var ret = getObject(arg0).crypto;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_msCrypto_c429c3f8f7a70bb5(arg0) {\n  var ret = getObject(arg0).msCrypto;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_newwithlength_929232475839a482(arg0) {\n  var ret = new Uint8Array(arg0 >>> 0);\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_self_c6fbdfc2918d5e58() {\n  return handleError(function () {\n    var ret = self.self;\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbg_window_baec038b5ab35c54() {\n  return handleError(function () {\n    var ret = window.window;\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbg_globalThis_3f735a5746d41fbd() {\n  return handleError(function () {\n    var ret = globalThis.globalThis;\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbg_global_1bc0b39582740e95() {\n  return handleError(function () {\n    var ret = global.global;\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbindgen_is_undefined(arg0) {\n  var ret = getObject(arg0) === undefined;\n  return ret;\n}\n;\nexport function __wbg_newnoargs_be86524d73f67598(arg0, arg1) {\n  var ret = new Function(getStringFromWasm0(arg0, arg1));\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_call_888d259a5fefc347() {\n  return handleError(function (arg0, arg1) {\n    var ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbg_randomFillSync_59fcc2add91fe7b3() {\n  return handleError(function (arg0, arg1, arg2) {\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n  }, arguments);\n}\n;\nexport function __wbg_subarray_8b658422a224f479(arg0, arg1, arg2) {\n  var ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_getRandomValues_3e46aa268da0fed1() {\n  return handleError(function (arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n  }, arguments);\n}\n;\nexport function __wbg_length_1eb8fc608a0d4cdb(arg0) {\n  var ret = getObject(arg0).length;\n  return ret;\n}\n;\nexport function __wbindgen_memory() {\n  var ret = wasm.memory;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_buffer_397eaa4d72ee94dd(arg0) {\n  var ret = getObject(arg0).buffer;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_new_a7ce447f15ff496f(arg0) {\n  var ret = new Uint8Array(getObject(arg0));\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_set_969ad0a60e51d320(arg0, arg1, arg2) {\n  getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n}\n;\nexport function __wbindgen_throw(arg0, arg1) {\n  throw new Error(getStringFromWasm0(arg0, arg1));\n}\n;","map":null,"metadata":{},"sourceType":"module"}