{"ast":null,"code":"import * as bibleJson from '../assets/bible/Bible.json';\nimport { filter, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/service-worker\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./the-bible/the-bible.component\";\nimport * as i4 from \"./update-toaster/update-toaster.component\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(swUpdate, router) {\n      this.swUpdate = swUpdate;\n      this.router = router;\n      this.title = 'Bible';\n      this.updateAvailable = false; // apply dark theme if set in storage\n\n      if (localStorage.getItem('theme') == 'dark') {\n        document.documentElement.setAttribute('dataTheme', 'dark');\n      } // this is the code needed for angular 13 and onwards; check for updates to the site -WORKS!!\n\n\n      const updatesAvailable = swUpdate.versionUpdates.pipe(filter(evt => evt.type === 'VERSION_READY'), map(evt => ({\n        type: 'UPDATE_AVAILABLE',\n        current: evt.currentVersion,\n        available: evt.latestVersion\n      })));\n      updatesAvailable.subscribe(event => {\n        this.updateAvailable = true;\n        console.log(\"update Available\");\n      });\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.SwUpdate), i0.ɵɵdirectiveInject(i2.Router));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 2,\n    vars: 1,\n    consts: [[3, \"showUpdate\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-the-bible\");\n        i0.ɵɵelement(1, \"app-update-toaster\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"showUpdate\", ctx.updateAvailable);\n      }\n    },\n    directives: [i3.TheBibleComponent, i4.UpdateToasterComponent],\n    styles: [\"\"]\n  });\n  return AppComponent;\n})();\nexport function read_file() {\n  return JSON.stringify(bibleJson); // WASM WORKS! don't touch\n}","map":null,"metadata":{},"sourceType":"module"}